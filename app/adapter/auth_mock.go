// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package adapter is a generated GoMock package.
package adapter

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthAdapter is a mock of AuthAdapter interface.
type MockAuthAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAdapterMockRecorder
}

// MockAuthAdapterMockRecorder is the mock recorder for MockAuthAdapter.
type MockAuthAdapterMockRecorder struct {
	mock *MockAuthAdapter
}

// NewMockAuthAdapter creates a new mock instance.
func NewMockAuthAdapter(ctrl *gomock.Controller) *MockAuthAdapter {
	mock := &MockAuthAdapter{ctrl: ctrl}
	mock.recorder = &MockAuthAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthAdapter) EXPECT() *MockAuthAdapterMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockAuthAdapter) Verify(arg0 RequestAuth, arg1 time.Time, arg2 int) (ResponseAuth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", arg0, arg1, arg2)
	ret0, _ := ret[0].(ResponseAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockAuthAdapterMockRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockAuthAdapter)(nil).Verify), arg0, arg1, arg2)
}
