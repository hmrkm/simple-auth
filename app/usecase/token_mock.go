// Code generated by MockGen. DO NOT EDIT.
// Source: token.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/hmrkm/simple-auth/domain"
)

// MockTokenUsecase is a mock of TokenUsecase interface.
type MockTokenUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTokenUsecaseMockRecorder
}

// MockTokenUsecaseMockRecorder is the mock recorder for MockTokenUsecase.
type MockTokenUsecaseMockRecorder struct {
	mock *MockTokenUsecase
}

// NewMockTokenUsecase creates a new mock instance.
func NewMockTokenUsecase(ctrl *gomock.Controller) *MockTokenUsecase {
	mock := &MockTokenUsecase{ctrl: ctrl}
	mock.recorder = &MockTokenUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenUsecase) EXPECT() *MockTokenUsecaseMockRecorder {
	return m.recorder
}

// Verify mocks base method.
func (m *MockTokenUsecase) Verify(token string, now time.Time) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", token, now)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockTokenUsecaseMockRecorder) Verify(token, now interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTokenUsecase)(nil).Verify), token, now)
}
